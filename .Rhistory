)
#params <- mle2(f, start = list(k_eff = .0001, k_l = 5, k_u = 1), fixed = list(k_0 = 4, e0 = 1, bData = 0), control = list(trace = 4), method="L-BFGS-B", lower=c(k_eff = 0.0000001, k_l = 0, k_u = 0))
}
)
all.params <- lapply(
sub_nums,
FUN = function(x) {
h.data  <- human.data %>% filter(SUBJECT == x)
f.1 <- function(x) {
f <- f.NLL(h.data)
f(
e0    = 1,
k_eff = x[1],
k_0 = 4,
k_u = .61,
k_l = x[2],
bData = 0
)
}
params <-
DEoptim(
f.1,
lower = c(k_eff = 0.000001, k_l = .00001),
upper = c(k_eff = 1, k_l = 10),
DEoptim.control(steptol = 20, reltol = 1e-4)
)
#params <- mle2(f, start = list(k_eff = .0001, k_l = 5, k_u = 1), fixed = list(k_0 = 4, e0 = 1, bData = 0), control = list(trace = 4), method="L-BFGS-B", lower=c(k_eff = 0.0000001, k_l = 0, k_u = 0))
}
)
sub.params$SUBJECT <- c("S1", "S2")
sub.params$k_0    <- 4
sub.params$e0     <- 1
sub.params$bData  <- 0
sub.params$k_u  <- .61
params.fovea <- sub.params
stimLvl             <-
expand.grid(
SUBJECT = c("S1", "S2"),
bCon = c(0, .1),
tCon = seq(0, .2, .005)
)
stimLvl$pc          <- .5
stimLvl$e_t         <- 0
psychometrics <- by_row(params.fovea, function(x) {
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
}, .to = "psychometric") %>%
.[["psychometric"]] %>%
do.call(rbind, .)
ggplot(human.data, aes(x = tCon, y = pc, colour = SUBJECT)) + geom_point() + geom_line(data = psychometrics, aes(x = tCon, y = pc_hat)) + facet_grid(~ bCon) + theme(aspect.ratio = 1)
params.fovea
sub.params <-
data.frame(do.call(rbind, map(map(all.params, 1), "bestmem")))
sub.params
sub.params$SUBJECT <- c("S1", "S2")
sub.params$k_0    <- 4
sub.params$e0     <- 1
sub.params$bData  <- 0
sub.params$k_u  <- .61
params.fovea <- sub.params
stimLvl             <-
expand.grid(
SUBJECT = c("S1", "S2"),
bCon = c(0, .1),
tCon = seq(0, .2, .005)
)
stimLvl$pc          <- .5
stimLvl$e_t         <- 0
psychometrics <- by_row(params.fovea, function(x) {
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
}, .to = "psychometric") %>%
.[["psychometric"]] %>%
do.call(rbind, .)
ggplot(human.data, aes(x = tCon, y = pc, colour = SUBJECT)) + geom_point() + geom_line(data = psychometrics, aes(x = tCon, y = pc_hat)) + facet_grid(~ bCon) + theme(aspect.ratio = 1)
psychometrics
ggplot(human.data, aes(x = tCon, y = pc, colour = SUBJECT)) + geom_point() + geom_line(data = psychometrics.fovea, aes(x = tCon, y = pc_hat)) + facet_grid(~ bCon) + theme(aspect.ratio = 1)
psychometrics.fovea <- by_row(params.fovea, function(x) {
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
}, .to = "psychometric") %>%
.[["psychometric"]] %>%
do.call(rbind, .)
ggplot(human.data, aes(x = tCon, y = pc, colour = SUBJECT)) + geom_point() + geom_line(data = psychometrics.fovea, aes(x = tCon, y = pc_hat)) + facet_grid(~ bCon) + theme(aspect.ratio = 1)
pdf("~/Dropbox/Calen/Dropbox/params.pdf",
height = 11,
width = 10)
search_data        <- read.csv('~/Dropbox/Calen/Work/search/diff_cos_ecc_maps/search_out.txt', sep = ',', header = F)
sigma.table <- interpolate.middle()
names(search_data) <- c("SUBJECT", "ecc", "vField", "bCon", "tCon", "present", "response", "correct")
search_data <- search_data %>%
unite(type, present, response, sep = "") %>%
select(-correct)
search_data$type      <- factor(search_data$type, levels = c("00", "11", "01", "10"), labels = c("CR", "HIT", "FA", "MISS"))
search_data$SUBJECT   <- factor(search_data$SUBJECT, levels = c(1, 2, 3), labels = c("S1", "S2", "S3"))
search_data$vField   <- factor(search_data$vField, levels = c(1, 2, 3), labels = c("V1", "V2", "V3"))
DoGScale         <- 0.686
search_data$bCon <- search_data$bCon * DoGScale
search_data$tCon <- search_data$tCon * 255/127
k_0_const <- 0
# Retrieve the periphery data values
periphery_key <- search_data %>%
select(-type) %>%
group_by(SUBJECT, vField, bCon, tCon) %>%
unique() %>%
summarize(n_obs = n()) %>%
filter(n_obs > 1) %>%
select(-n_obs)
periphery_data <- merge(search_data, periphery_key)
# Percent correct in the fovea
human.data <- periphery_data %>%
group_by(SUBJECT, ecc, bCon, tCon, vField, type) %>%
summarize(n_count = n()) %>%
spread(type, n_count) %>%
mutate(pc = (HIT + CR
)/sum(CR, HIT, FA, MISS, na.rm = T)) %>%
arrange(SUBJECT, bCon, tCon, ecc) %>%
rename(e_t = ecc)
bCon <- unique(human.data$bCon)
tCon <- unique(human.data$tCon)
e_t  <- unique(human.data$e_t)
sigma.table <-
sigma.table[, setdiff(names(sigma.table), c("data"))]
sigma.table <-
rbind(sigma.table, data.frame(
CVals = 0,
SVals = 0,
N = 1,
y_hat = 0
))
sigma.table <- sigma.table %>%
group_by(CVals, SVals) %>%
merge(., data.frame(e_t)) %>%
as_tibble() %>%
arrange(CVals, e_t)
sub_nums <- as.character(unique(human.data$SUBJECT))
VF       <- as.character(unique(human.data$vField))
expCond <- expand.grid(sub_nums, VF)
nExpCond <- nrow(expCond)
all.params <- mclapply(1:
nExpCond,
FUN = function(x) {
h.data <- human.data %>% filter(SUBJECT == as.character(expCond[x, 1]), vField == as.character(expCond[x,2]))
p.fovea <- params.fovea %>% filter(SUBJECT == expCond[x,1])
browser()
f.1 <- function(x) {
f <- f.NLL(h.data)
f(
e0 = x[1],
k_eff = p.fovea$k_eff,
k_0 = 4,
k_u = .61,
k_l = p.fovea$k_l,
bData = 0
)
}
params <-
DEoptim(
f.1,
lower = c(e0 = .00001),
upper = c(e0 = 10),
DEoptim.control(steptol = 20, reltol = 1e-4)
)
#params <- mle2(f, start = list(k_eff = .0001, k_l = 5, k_u = 1), fixed = list(k_0 = 4, e0 = 1, bData = 0), control = list(trace = 4), method="L-BFGS-B", lower=c(k_eff = 0.0000001, k_l = 0, k_u = 0))
}
, mc.cores = 15)
sub.params
sub.params <-
data.frame(do.call(rbind, map(map(all.params, 1), "bestmem")))
sub.params
all.params
all.params
all.params <- mclapply(1:
nExpCond,
FUN = function(x) {
h.data <- human.data %>% filter(SUBJECT == as.character(expCond[x, 1]), vField == as.character(expCond[x,2]))
p.fovea <- params.fovea %>% filter(SUBJECT == expCond[x,1])
f.1 <- function(x) {
f <- f.NLL(h.data)
f(
e0 = x[1],
k_eff = p.fovea$k_eff,
k_0 = 4,
k_u = .61,
k_l = p.fovea$k_l,
bData = 0
)
}
params <-
DEoptim(
f.1,
lower = c(e0 = .00001),
upper = c(e0 = 10),
DEoptim.control(steptol = 20, reltol = 1e-4)
)
#params <- mle2(f, start = list(k_eff = .0001, k_l = 5, k_u = 1), fixed = list(k_0 = 4, e0 = 1, bData = 0), control = list(trace = 4), method="L-BFGS-B", lower=c(k_eff = 0.0000001, k_l = 0, k_u = 0))
}
, mc.cores = 15)
sub.params <-
data.frame(do.call(rbind, map(map(all.params, 1), "bestmem")))
sub.params
sub.params$SUBJECT <- expCond$Var1
sub.params$k_eff = p.fovea$k_eff
sub.params$k_0 = 4
sub.params$k_u = .61
sub.params$k_l = p.fovea$k_l
sub.params
stimLvl <-
expand.grid(
SUBJECT = c("S1", "S2"),
bCon = c(0, .1),
e_t = seq(0, 5, .005)
)
stimLvl$pc          <- .5
stimLvl$e_t         <- 0
x <- sub.param[1,]
sub.params
x <- sub.params[1,]
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
stimLvl
h.data
data <- human.data
k_eff <- 1
k_l <- 1
k_u <- 1
k_0 <- 1
e_0 <- 1
print(c(k_eff, k_l, k_u, k_0, e0))
k_eff <- k_eff
k_l   <- k_l
k_u   <- k_u
k_0   <- k_0
e0    <- e0
bData <- bData
sigmaC <- merge(sigma.table, human.data$tCon) %>%
rename(tCon = y)
sigmaC <- lapply(
setdiff(bCon, 0),
FUN = function(bCon) {
sigmaC %>% group_by(tCon) %>%
filter(
CVals == Find(function(x) {
x < bCon
}, CVals, right = TRUE) |
CVals == Find(function(x) {
x > bCon
}, CVals, right = TRUE) | CVals == 0
)
}
) %>%
do.call(rbind, .)
pc.pred <- by_row(sigmaC, function(x) {
sigma   <- x$y_hat
c_t     <- x$tCon
e_t     <- x$e_t
pc_hat  <-
pnorm(dprime_uh_sstats(k_eff, sigma, k_l, k_u, c_t, e_t, k_0, e0) / 2)
params  <-
data.frame(
k_eff = k_eff,
sigma = sigma,
k_l = k_l,
k_u = k_u,
e0   = e0,
pc_hat = pc_hat
)
}, .to = "pc_hat") %>%
unnest(pc_hat)
pc.pred.contrast <- pc.pred %>%
filter(!is.na(pc_hat)) %>%
group_by(CVals, tCon, tCon, k_eff, k_l, k_u, e_t, e0) %>%
summarize(pc_hat = sum(pc_hat * N) / sum(N))
pc.pred.bcon <- lapply(
bCon,
FUN = function(bCon) {
if (bCon != 0) {
pc.pred.contrast %>%
group_by(tCon, k_eff, k_l, k_u, e_t, e0) %>%
filter(
CVals == Find(function(x)
x < bCon, CVals, right = TRUE) |
CVals == Find(function(x)
x > bCon, CVals, right = FALSE)
) %>%
nest() %>%
mutate(pc_hat = map(data, function(x) {
x1 = x$CVals[1]
x2 = x$CVals[2]
y1 = x$pc_hat[1]
y2 = x$pc_hat[2]
(y2 - y1) / (x2 - x1) * (bCon - x1) + y1
})) %>%
unnest(pc_hat) %>%
select(-data) %>%
mutate(bCon = bCon)
} else{
pc.pred.contrast %>%
filter(CVals == 0) %>%
data.frame() %>%
select(tCon, pc_hat, k_eff, k_l, k_u, e_t, e0)  %>%
mutate(bCon = bCon)
}
}
) %>%
do.call(rbind, .) %>%
left_join(human.data, ., by = c("bCon", "tCon", "e_t")) %>%
mutate(pc_hat = ifelse(pc_hat == 1, 1 - 1 / 300, pc_hat)) %>%
mutate(NLL = -(pc * log(pc_hat) + (1 - pc) * log(1 - pc_hat))) %>%
ungroup()
pc.pred.bcon
pc.pred.contrast
pc.pred
bCon
human.data
f <- f.NLL(h.data)
f
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
h.data
data <- h.data
print(c(k_eff, k_l, k_u, k_0, e0))
k_eff <- k_eff
k_l   <- k_l
k_u   <- k_u
k_0   <- k_0
e0    <- e0
bData <- bData
sigmaC <- merge(sigma.table, human.data$tCon) %>%
rename(tCon = y)
sigmaC <- lapply(
setdiff(bCon, 0),
FUN = function(bCon) {
sigmaC %>% group_by(tCon) %>%
filter(
CVals == Find(function(x) {
x < bCon
}, CVals, right = TRUE) |
CVals == Find(function(x) {
x > bCon
}, CVals, right = TRUE) | CVals == 0
)
}
) %>%
do.call(rbind, .)
sigmaC
pc.pred <- by_row(sigmaC, function(x) {
sigma   <- x$y_hat
c_t     <- x$tCon
e_t     <- x$e_t
pc_hat  <-
pnorm(dprime_uh_sstats(k_eff, sigma, k_l, k_u, c_t, e_t, k_0, e0) / 2)
params  <-
data.frame(
k_eff = k_eff,
sigma = sigma,
k_l = k_l,
k_u = k_u,
e0   = e0,
pc_hat = pc_hat
)
}, .to = "pc_hat") %>%
unnest(pc_hat)
pc.pred.contrast <- pc.pred %>%
filter(!is.na(pc_hat)) %>%
group_by(CVals, tCon, tCon, k_eff, k_l, k_u, e_t, e0) %>%
summarize(pc_hat = sum(pc_hat * N) / sum(N))
pc.pred.contrast
pc.pred
sigmaC$tCon
unique(sigmaC$tCon)
human.data
sigmaC <- merge(sigma.table, data$tCon) %>%
rename(tCon = y)
data
stimLvl <-
expand.grid(
SUBJECT = c("S1", "S2"),
bCon = unique(human.data$bCon),
tCon = unique(human.data$tCon),
e_t = seq(0, 5, .005)
)
stimLvl
stimLvl$pc          <- .5
stimLvl$e_t         <- 0
psychometrics <- by_row(sub.params, function(x) {
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
}, .to = "psychometric") %>%
.[["psychometric"]] %>%
do.call(rbind, .)
psychometrics
sub.params
z
x
sub.params
x
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
h.data
f <- f.NLL(h.data)
f
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
k_l
k_u
k_0  <- as.numeric(x$k_0)
k_0
e0
f(k_eff, k_l, k_u, k_0, e0, 1)
sub.params
psychometrics
print(c(k_eff, k_l, k_u, k_0, e0))
k_eff <- k_eff
k_l   <- k_l
k_u   <- k_u
k_0   <- k_0
e0    <- e0
bData
bData
bData <- bData
sigmaC <- merge(sigma.table, data$tCon) %>%
rename(tCon = y)
sigma.table
data$tCon
data
sigmaC <- merge(sigma.table, data$e_t) %>%
rename(tCon = y)
sigmaC <- lapply(
setdiff(bCon, 0),
FUN = function(bCon) {
sigmaC %>% group_by(tCon) %>%
filter(
CVals == Find(function(x) {
x < bCon
}, CVals, right = TRUE) |
CVals == Find(function(x) {
x > bCon
}, CVals, right = TRUE) | CVals == 0
)
}
) %>%
do.call(rbind, .)
pc.pred <- by_row(sigmaC, function(x) {
sigma   <- x$y_hat
c_t     <- x$tCon
e_t     <- x$e_t
pc_hat  <-
pnorm(dprime_uh_sstats(k_eff, sigma, k_l, k_u, c_t, e_t, k_0, e0) / 2)
params  <-
data.frame(
k_eff = k_eff,
sigma = sigma,
k_l = k_l,
k_u = k_u,
e0   = e0,
pc_hat = pc_hat
)
}, .to = "pc_hat") %>%
unnest(pc_hat)
stimLvl <-
expand.grid(
SUBJECT = c("S1", "S2"),
bCon = unique(human.data$bCon),
tCon = unique(human.data$tCon),
e_t = seq(0, 5, .01)
)
stimLvl$pc          <- .5
stimLvl$e_t         <- 0
x <- sub.params[1,]
x
h.data <- stimLvl %>% filter(SUBJECT == as.character(x$SUBJECT))
f <- f.NLL(h.data)
k_eff <- as.numeric(x$k_eff)
k_l  <- as.numeric(x$k_l)
k_u  <- as.numeric(x$k_u)
k_0  <- as.numeric(x$k_0)
e0 <- as.numeric(x$e0)
f(k_eff, k_l, k_u, k_0, e0, 1)
x
test <- f(k_eff, k_l, k_u, k_0, e0, 1)
