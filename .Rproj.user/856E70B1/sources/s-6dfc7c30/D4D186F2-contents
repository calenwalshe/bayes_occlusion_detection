# Produce Scene Statistics Figure
plot.summary.statistics.cardinal <- function() {
  library(tidyr)
  library(ggplot2)
  library(ggthemes)
  library(dplyr)
  library(purrrlyr)
  library(purrr)
  
  summarize <- dplyr::summarise
  
  source('~/Dropbox/Calen/Work/occluding/occlusion_detect/_model/plot_theme.R')
  source('~/Dropbox/Calen/Work/occluding/occlusion_detect/_model/import_model.R')
  load("~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/model.error2d.rdata")
  
  bin.values <- get_experiment_bin_values()
  
  values.df <- model.wide %>%
    select(TARGET, BIN, eccentricity,data_sd_vec_0, data_sd_vec_1, data_mean_vec_0, data_mean_vec_1)
  
  values.df$edge.sd.abs <- map(values.df$data_sd_vec_0, 1)
  #values.df$mean.sd.abs <- map(values.df$data_sd_vec_0, 2)
  values.df$pattern.sd.abs <- map(values.df$data_sd_vec_0, 2)
  
  values.df$edge.mean.abs <- map(values.df$data_mean_vec_0, 1)
  #values.df$mean.mean.abs <- map(values.df$data_mean_vec_0, 2)
  values.df$pattern.mean.abs <- map(values.df$data_mean_vec_0, 2)
  
  values.df$edge.sd.pres <- map(values.df$data_sd_vec_1, 1)
  #values.df$mean.sd.pres <- map(values.df$data_sd_vec_1, 2)
  values.df$pattern.sd.pres <- map(values.df$data_sd_vec_1, 2)
  
  values.df$edge.mean.pres <- map(values.df$data_mean_vec_1, 1)
  #values.df$mean.mean.pres <- map(values.df$data_mean_vec_1, 2)
  values.df$pattern.mean.pres <- map(values.df$data_mean_vec_1, 2)  
  
  values.df <- values.df %>% select(-contains("data"))
  
  values.df <- values.df %>% gather("name","value",4:11)
  
  values.df <- values.df %>% separate(name, c("cue", "statistic", "bPresent"))
  
  values.df <- left_join(values.df, bin.values, by = c("TARGET", "BIN"))
  
  values.df$value <- do.call(rbind, values.df$value)
  
  values.df$cue <- factor(values.df$cue, levels = c("edge", "pattern"), labels = c("Edge", "Pattern"))
  values.df$statType <- factor(values.df$statType, levels = c("Lvals", "Cvals", "Svals"), labels = c("Luminance", "Contrast", "Similarity"))
  values.df$statistic <- factor(values.df$statistic, levels = c("mean", "sd"), labels = c("Mean", "Standard Deviation"))
  
  values.df$statValue[values.df$statType == "Luminance"] <- values.df$statValue[values.df$statType == "Luminance"] / 100
  to_string <- as_labeller(c(`Luminance` = "Luminance (Rel)", `Contrast` = "Contrast (RMS)", `Similarity` = "Similarity", `Mean` = "Mean", `Standard Deviation` = "Standard Deviation"))
  
  #invis.dat.lum <- values.df %>% 
  #  filter(cue == "Luminance") %>%
  #  group_by(statistic) %>% 
  #  #mutate(value = list(c(min(value), max(value)))) %>% 
  #  mutate(min.val = min(value), max.val = max(value), add.range = (max.val - min.val) * .1) %>%
  #  mutate(value = list(c(min(min.val - add.range), max(max.val + add.range)))) %>%
  #  unique() %>% select(-min.val,max.val, add.range) %>%
  #  unnest(value)
  
  invis.dat.edge <- values.df %>% 
    filter(cue == "Edge", bPresent == "pres") %>%
    group_by(statistic, statType, eccentricity) %>% 
    #mutate(value = list(c(min(value), max(value)))) %>% 
    mutate(min.val = min(value), max.val = max(value), add.range = (max.val - min.val) * 0) %>%
    mutate(value = list(c(min(min.val - add.range), max(max.val + add.range)))) %>%
    unique() %>% select(-min.val,max.val, add.range) %>%
    unnest(value)
  
  invis.dat.pat <- values.df %>% 
    filter(cue == "Pattern") %>%
    group_by(statistic, statType) %>% 
    #mutate(value = list(c(min(value), max(value)))) %>% 
    mutate(min.val = min(value), max.val = max(value), add.range = (max.val - min.val) * 0) %>%
    mutate(value = list(c(min(min.val - add.range), max(max.val + add.range)))) %>%
    unique() %>% select(-min.val,max.val, add.range) %>%
    unnest(value)
  

  lapply(c(0, 12), FUN = function(x) {
    
    palettes <- ggthemes_data[["tableau"]][["color-palettes"]][["regular"]]
    
    colours.targets <- palettes$`Tableau 10`$value
    
    values.eccentricity <- values.df %>% filter(round(eccentricity) == x)
    
    values.dprime <- values.eccentricity %>% select(TARGET, BIN, eccentricity, cue, statistic, bPresent, value) %>% unique() %>% 
      spread(statistic, value) %>% 
      group_by(TARGET, BIN, eccentricity, cue) %>%
      summarize(mean = abs(diff(Mean)), sd = sqrt(sum((`Standard Deviation`)^2)), dprime = mean/sd) %>% select(TARGET, BIN, eccentricity, cue, dprime)
    
    
    values.dprime <- merge(bin.values, values.dprime) %>% as_tibble() %>% mutate(statValue = ifelse(statType == "Lvals", statValue / 100, statValue))
    values.dprime$statType <- factor(values.dprime$statType, levels = c("Lvals", "Cvals", "Svals"), labels = c("Luminance", "Contrast", "Similarity"))
      
    invis.edge <- invis.dat.edge %>% mutate(bPresent = ifelse(bPresent == "abs", "Absent", "Present")) %>% filter(round(eccentricity) == x)
    invis.pat <- invis.dat.pat %>% mutate(bPresent = ifelse(bPresent == "abs", "Absent", "Present")) %>% filter(round(eccentricity) == x)
    
    
    values.eccentricity$value[values.eccentricity$statistic == "Standard Deviation"] <- (values.eccentricity$value[values.eccentricity$statistic == "Standard Deviation"])
    
    values.eccentricity           <- values.eccentricity %>% mutate(bPresent = ifelse(bPresent == "abs", "Absent", "Present"))
    
    
    width.fig <- 7
    height.fig = 7
    
    panel.border.sz <- 1
    tick.sz         <- 1
    axis.text.sz    <- 8
    panel.text.sz   <- 8
    point.sz        <- 2
    
    theme_set(theme_bw())
    theme_update(aspect.ratio = 1, 
                 axis.ticks = element_line(size = tick.sz),
                 panel.background = element_rect(fill = "white"),
                 #axis.ticks.length=unit(tick.length, "cm"),
                 #axis.text.x = element_text(margin=unit(axis.text.shift.x, "cm")), 
                 #axis.text.y = element_text(margin=unit(axis.text.shift.y, "cm")),
                 axis.text = element_text(size = panel.text.sz),
                 panel.grid.major = element_blank(), 
                 panel.grid.minor = element_blank(),
                 legend.title=element_blank(),
                 legend.text = element_text(size = 12),
                 legend.key.size = unit(10, "pt"),
                 panel.border = element_rect(fill=NA, colour = "#19181A", size=panel.border.sz),
                 plot.title = element_text(hjust = 0.5),
                 legend.key=element_blank(),
                 strip.placement = "outside",
                 strip.background  = element_blank(),
                 strip.text = element_text(size = panel.text.sz))
    
    colour.guide <- guide_legend(label.theme = element_text(size = 10))
    shape.guide  <- guide_legend(label.theme = element_text(size = 10))
    
    axis.val.dprime <- "free"
    axis.val.stats  <- "free"

    # Edge Cue
    # Dprime 
    breaks <- values.dprime %>% filter(cue == "Edge") 
    breaks <- (c(floor(min(breaks$dprime)), ceiling(max(breaks$dprime))))
    breaks <- if((breaks[2] - breaks[1] <= 4)){
      breaks <- seq(breaks[1],breaks[2])
    } else{
      breaks <- round(seq(breaks[1], breaks[2], length.out = 4))
    }
    
    fig.dprime <- ggplot(values.dprime %>% filter(cue == "Edge"), aes(x = statValue, y = dprime, colour = TARGET)) + 
      facet_wrap(~statType, scale = axis.val.dprime, labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.dprime, x = NA, size = 1) +
      geom_line(size = .5) +
      ggtitle(paste0("Edge Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      scale_y_continuous(breaks = breaks) +
      expand_limits(y = breaks) +
      guides(colour = colour.guide, linetype = "none") +
      xlab("") +
      ylab("dprime")
    
    plot(fig.dprime)
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/',
                             'dprime_edge_', x, '.pdf'), plot = fig.dprime, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)    
    
    
    ## PLOTTING EDGE MEAN ##
    secondary.scale.factor <- .3

    fig.edge.mean <- ggplot(values.eccentricity %>% 
                         filter(cue == "Edge", statistic == "Mean") %>%
                         mutate(value = ifelse(statistic == "Mean" & bPresent == "Absent", value + secondary.scale.factor, value),
                                value = ifelse(statistic == "Standard Deviation" & bPresent == "Present", value * secondary.scale.factor, value)), aes(x = statValue, y = value, colour = bPresent, shape = TARGET)) + 
      facet_grid(~statType, scales = "free", labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.edge, x = NA) +
      geom_line(size = .5) +
      ggtitle(paste0("Edge Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      guides(colour = colour.guide, shape = shape.guide, linetype = "none") +
      scale_y_continuous("Target Present", 
                         breaks = c(.92, .94, .96, .98, 1), 
                         expand = expand_scale(mult = .1), 
                         labels = scales::number_format(accuracy = 0.01, decimal.mark = '.'),
                         sec.axis = sec_axis(~ . - secondary.scale.factor, 
                                             breaks = c(.92, .94, .96, .98,1) - secondary.scale.factor,
                                             name = "Target Absent")) +
      xlab("Mean") +
      ylab("")
      
    
    plot(fig.edge.mean)
    
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/', 'edge_mean', x, '.pdf'), plot = fig.edge.mean, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)

    ## END PLOT FIGURE MEAN ##
        
    ## PLOTTING EDGE SD ##
    secondary.scale.factor <- .05
    
    fig.edge.std <- ggplot(values.eccentricity %>% 
                              filter(cue == "Edge", statistic == "Standard Deviation") %>%
                              mutate(value = ifelse(statistic == "Standard Deviation" & bPresent == "Absent", value - secondary.scale.factor, value)), aes(x = statValue, y = value, colour = bPresent, shape = TARGET)) + 
      facet_wrap(~statType, scales = "free", labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.edge, x = NA) +
      geom_line(size = .5) +
      ggtitle(paste0("Edge Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      guides(colour = colour.guide, shape = shape.guide, linetype = "none") +
      scale_y_continuous("Target Present", 
                         breaks = function(x){
                           scale.vals <- x[2] - x[1]
                           seq(x[1] + scale.vals * .05, x[2] + scale.vals * 1.05, scale.vals/4)
                           #c(.01, .02, .03, .04)
                         },
                         #expand = expand_scale(mult = .5), 
                         labels = scales::number_format(accuracy = 0.01, decimal.mark = '.'),
                         sec.axis = sec_axis(~ . + secondary.scale.factor,
                                             breaks = function(x){
                                               scale.vals <- x[2] - x[1]
                                               seq(x[1] + scale.vals * .05, x[2] + scale.vals * 1.05, scale.vals/4)
                                               #c(.01, .02, .03, .04) + secondary.scale.factor
                                             },
                                             labels = scales::number_format(accuracy = 0.01, decimal.mark = '.'),
                                             name = "Target Absent")) +
      xlab("Standard Deviation") +
      ylab("")
    
    plot(fig.edge.std)
    
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/', 'edge_std', x, '.pdf'), plot = fig.edge.std, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)
    
    ## END PLOT FIGURE MEAN ##    
    
    # Pattern Cue
    # Dprime 
    breaks <- values.dprime %>% filter(cue == "Pattern") 
    breaks <- (c(floor(min(breaks$dprime)), ceiling(max(breaks$dprime))))
    breaks <- if((breaks[2] - breaks[1] <= 4)){
      breaks <- seq(breaks[1],breaks[2])
    } else{
      breaks <- round(seq(breaks[1], breaks[2], length.out = 4))
    }
    
    fig.dprime <- ggplot(values.dprime %>% filter(cue == "Pattern"), aes(x = statValue, y = dprime, colour = TARGET)) + 
      facet_wrap(~statType, scales = "free", labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.pat, x = NA, size = 1) +
      geom_line(size = .5) +
      ggtitle(paste0("Pattern Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      scale_y_continuous(breaks = function(x){
        axis.total <- (x[2] - x[1])
        seq(x[1] + axis.total * .05, x[2] + axis.total * 5, axis.total/3)
        },
        labels = scales::number_format(accuracy = 1, decimal.mark = '.'),
        expand = expand_scale(mult = .1)) +
      #expand_limits(y = breaks) +
      guides(colour = colour.guide, linetype = "none") +
      xlab("") +
      ylab("dprime")
    
    plot(fig.dprime)
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/',
                             'dprime_pattern_', x, '.pdf'), plot = fig.dprime, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)    
    
    
    ## PLOTTING Pattern MEAN ##
    secondary.scale.factor <- 60
    
    present.vals <- values.eccentricity %>% filter(bPresent == "Present")
    absent.vals <- values.eccentricity %>% filter(bPresent == "Absent")
    
    fig.edge.mean <- ggplot(values.eccentricity %>% 
                              filter(cue == "Pattern", statistic == "Mean") %>%
                              mutate(value = ifelse(statistic == "Mean" & bPresent == "Absent", value * secondary.scale.factor, value),
                                     value = ifelse(statistic == "Standard Deviation" & bPresent == "Present", value * secondary.scale.factor, value)), aes(x = statValue, y = value, colour = bPresent, shape = TARGET)) + 
      facet_wrap(~statType, scales = "free", labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.edge, x = NA) +
      geom_line(size = .5) +
      ggtitle(paste0("Pattern Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      guides(colour = colour.guide, shape = shape.guide, linetype = "none") +
      scale_y_continuous(breaks = function(x){
        axis.total <- (x[2] - x[1])
        seq(0, x[2] - axis.total * .05, axis.total/3)
        },
        expand = expand_scale(mult = .1),
        labels = scales::number_format(accuracy = 0.01, decimal.mark = '.'),
        sec.axis = sec_axis(~ . / secondary.scale.factor, 
                            #breaks = c(.92, .94, .96, .98,1) - secondary.scale.factor,
                            name = "Target Absent")) +
      xlab("Mean") +
      ylab("")
    
    
    plot(fig.edge.mean)
    
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/', 'edge_mean', x, '.pdf'), plot = fig.edge.mean, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)
    
    ## END PLOT FIGURE MEAN ##
    
    ## PLOTTING Pattern SD ##
    secondary.scale.factor <- .07
    
    fig.edge.std <- ggplot(values.eccentricity %>% 
                             filter(cue == "Edge", statistic == "Standard Deviation") %>%
                             mutate(value = ifelse(statistic == "Standard Deviation" & bPresent == "Absent", value - secondary.scale.factor, value)), aes(x = statValue, y = value, colour = bPresent, shape = TARGET)) + 
      facet_grid(~statType, scales = "free", labeller = to_string) + 
      geom_point(size = point.sz) +
      #geom_point(data = invis.edge, x = NA) +
      geom_line(size = .5) +
      ggtitle(paste0("Edge Cue", " ", x, "\U00B0")) +
      scale_color_manual(values = colours.targets) +
      guides(colour = colour.guide, shape = shape.guide, linetype = "none") +
      scale_y_continuous("Target Present", 
                         breaks = c(0, .02, .04, .06),
                         expand = expand_scale(mult = .15), 
                         #labels = scales::number_format(accuracy = 0.1, decimal.mark = '.'),
                         sec.axis = sec_axis(~ . + secondary.scale.factor, 
                                             breaks = c(0, .02, .04, .06) + secondary.scale.factor,
                                             name = "Target Absent")) +
      xlab("Standard Deviation") +
      ylab("")
    
    plot(fig.edge.std)
    
    ggsave(filename = paste0('~/Dropbox/Calen/Work/occluding/occlusion_detect/_paper1figures/scene_statistics_figure/_figures/', 'edge_std', x, '.pdf'), plot = fig.edge.std, width = width.fig,height=height.fig,units = "in", useDingbats=FALSE)
    
    ## END PLOT FIGURE MEAN ##    
  })
}

