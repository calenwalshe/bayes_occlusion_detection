template_response <- load_cached_template_response()
qnorm(.2)
qnorm(.1)
qnorm(..01)
qnorm(.01)
plot(exp(-seq(-10,10,.1)))
exp(0)
exp(-10)
plot(1/exp(-seq(-10,10,.1)))
exp(-10)
1/(exp(-10))
plot(1/exp(seq(-10,10,.1)))
exp(0)
exp(10)
1/exp(10)
1.67 * 2
1.67 * 3
1.67 * 4
1.67 * 8
setwd("~/Dropbox/Calen/Work/occluding_signal_detect/_human")
source('~/Dropbox/Calen/Work/occluding_signal_detect/_human/human_psychometrics.R', echo=TRUE)
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/')
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
source('~/Dropbox/Calen/Work/occluding_signal_detect/_human/human_psychometrics.R', echo=TRUE)
source('~/Dropbox/Calen/Work/occluding_signal_detect/_human/human_psychometrics.R', echo=TRUE)
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
files <- list.files('../', recursive = T, full.names = T)
sapply(files, source)
source('~/Dropbox/Calen/Work/occluding_signal_detect/_human/human_psychometrics.R', echo=TRUE)
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
library(dplyr)
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
library(tidyr)
human_responses <- get_human_responses('~/Dropbox/Calen/Work/natural_masking_aux/_data/exported/human_data.txt')
head(human_response)
head(human_responses)
human_detect <- get_human_detect(human_responses)
head(human_detect)
human_mle <- get_human_mle_params(human_responses)
human_mle
# Remove replicated rows
human_responses <- human_responses[, setdiff(names(human_responses),
c("L", "C", "S", "statType", "statValue"))] %>%
distinct()
# Likelihood function.
f <- function(d0, e0, b, g) {
likelihood <- sum(log(pnorm(0.5 * d0 * (e0^b)/(e0^b + hit_vec^b) - g))) +
sum(log(pnorm(-0.5 * d0 * (e0^b)/(e0^b + fa_vec^b) - g))) +
sum(log(pnorm(-0.5 * d0 * (e0^b)/(e0^b + miss_vec^b) + g))) +
sum(log(pnorm(0.5 * d0 * (e0^b)/(e0^b + cr_vec^b) + g)))
nll <- -likelihood
if (is.infinite(nll)) {
return(10000)
} else {
return(nll)
}
}
get_params <- function(human_response_condition) {
hit_vec <- human_response_condition[human_response_condition$HIT ==
1, "ECCENTRICITY"]
fa_vec <- human_response_condition[human_response_condition$FALSEALARM ==
1, "ECCENTRICITY"]
cr_vec <- human_response_condition[human_response_condition$CORRECTREJECTION ==
1, "ECCENTRICITY"]
miss_vec <- human_response_condition[human_response_condition$MISS ==
1, "ECCENTRICITY"]
environment(f) <- environment()
return(f)
}
human_response_list <- human_responses %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
start_params <- expand.grid(d0 = 4.5, e0 = seq(1, 20, 0.5),
b = seq(0, 5, 0.5), g = seq(-2, 2, 0.2))
n_search <- nrow(start_params)
# Grid search for best starting parameters
grid_params <- lapply(fcn_vec, FUN = function(x) cbind(start_params,
nll = unlist(mclapply(1:n_search, FUN =
function(y) x(d0 = start_params[y, 1], e0 = start_params[y, 2], b = start_params[y, 3], g = start_params[y, 4]), mc.cores = 16))) %>%
filter(nll == min(nll)))
head(grid_params)
start_params <- do.call(rbind, grid_params)
subject_df <- lapply(human_response_list, FUN = function(x) x[1,
c("TARGET", "BIN", "SUBJECT")]) %>% do.call(rbind, .)
head(start_params)
head(subject_df)
head(fcn_vec)
head(start_params)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
head(p.1)
fcn_vec
fcn_vec[[1]]
head(human_response_condition)
head(model_responses)
head(human_responses)
head(human_responses %>% group_by(TARGET,BIN,SUBJECT,SESSION,LEVEL) %>% sample_n(n(), replace = TRUE))
head(human_responses %>% group_by(TARGET,BIN,SUBJECT,SESSION,LEVEL) %>% sample_n(30, replace = TRUE))
head(human_responses %>% group_by(TARGET,BIN,SUBJECT,SESSION,LEVEL) %>% sample_frac(1, replace = TRUE))
boot_fcn <- function(human_responses) {
boot_response <- human_responses %>% group_by(TARGET,BIN,SUBJECT,SESSION,LEVEL) %>%
sample_frac(1, replace = TRUE)
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
}
fcn_vec <- boot_fcn(human_response)
fcn_vec <- boot_fcn(human_responses)
head(fcn_vec)
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
p.1
?replicate
boot_fcn <- function() {
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
}
replicate(boot_fcn)
replicate(boot_fcn,5)
replicate(5,boot_fcn)
boot_fcn()
boot_fcn <- function() {
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
return(p.1)
}
dat <- replicate(5, boot_fcn())
head(dat)
dat
dat <- boot_fcn()
dat
dat <- replicate(5, boot_fcn(), simplify = F)
dat <- replicate(2, boot_fcn(), simplify = F)
head(dat)
boot_fcn <- function() {
fcn_vec <- boot_data(human_responses)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
return(p.1)
}
dat <- replicate(2, boot_fcn(), simplify = F)
boot_data <- function(human_responses) {
boot_response <- human_responses %>% group_by(TARGET,BIN,SUBJECT,SESSION,LEVEL) %>%
sample_frac(1, replace = TRUE)
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
}
boot_fcn <- function() {
fcn_vec <- boot_data(human_responses)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
return(p.1)
}
dat <- replicate(2, boot_fcn(), simplify = F)
dat
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
thresholds <- get_threshold(p.1)
thresholds
boot_fcn <- function() {
fcn_vec <- boot_data(human_responses)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
thresholds <- get_threshold(p.1)
return(thresholds)
}
dat <- replicate(2, boot_fcn(), simplify = F)
dat
boot_samples <- replicate(2, boot_fcn)
boot_samples <- replicate(2, boot_fcn())
head(boot_samples)
boot_samples <- replicate(2, boot_fcn(), simplify = F)
head(boot_samples)
boot_data <- function(human_responses) {
boot_response <- human_responses %>% group_by(TARGET,BIN,SUBJECT) %>%
sample_frac(1, replace = TRUE)
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
}
boot_fcn <- function() {
fcn_vec <- boot_data(human_responses)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
thresholds <- get_threshold(p.1)
return(thresholds)
}
boot_samples <- replicate(2, boot_fcn(), simplify = F)
head(boot_samples)
head(human_responses)
boot_data <- function(human_responses) {
boot_response <- human_responses %>%
group_by(TARGET,BIN,SUBJECT) %>%
sample_frac(1, replace = TRUE)
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
}
boot_fcn <- function() {
fcn_vec <- boot_data(human_responses)
# ---
# Step 1.
# Maximum likelihood for parameters, all parameters free to
# vary.
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
thresholds <- get_threshold(p.1)
return(thresholds)
}
boot_samples <- replicate(2, boot_fcn(), simplify = F)
head(boot_samples)
do.call(boot_samples, rbind)
do.call(rbind, boot_samples)
do.call(rbind, boot_samples) %>% filter(TARGET == "bowtie", BIN == 1, SUBJECT == "rcw")
boot_samples <- replicate(3, boot_fcn(), simplify = F)
head(boot_samples)
do.call(rbind, boot_samples) %>% filter(TARGET == "bowtie", BIN == 1, SUBJECT == "rcw")
fcn_vec <- boot_data(human_responses)
fcn_vec
boot_response <- human_responses %>%
group_by(TARGET,BIN,SUBJECT) %>%
sample_frac(1, replace = TRUE)
head(boot_response)
?sample_frac
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list
head(human_response_list)
human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
boot_data <- function(human_responses) {
boot_response <- human_responses %>%
group_by(TARGET,BIN,SUBJECT) %>%
sample_frac(1, replace = TRUE)
human_response_list <- boot_response %>%
group_by(TARGET,
BIN, SUBJECT) %>% do(vals = data.frame(.)) %>%
select(vals) %>%
as.list()
human_response_list <- human_response_list[[1]]
fcn_vec <- lapply(human_response_list, FUN = function(x) get_params(x))
}
fcn_vec <- boot_data(human_responses)
fcn_vec
p.1 <- mclapply(1:length(fcn_vec), FUN = function(x) {
y <- start_params[x, ]
mle2(fcn_vec[[x]], start = list(e0 = y$e0, b = y$b, g = y$g),
fixed = list(d0 = 4.5)) %>% coef
}, mc.cores = 16) %>% do.call(rbind, .) %>% data.frame %>%
cbind(subject_df, .)  #
p.1
thresholds <- get_threshold(p.1)
thresholds
boot_samples <- replicate(3, boot_fcn(), simplify = F)
boot_samples
do.call(rbind, boot_samples)
do.call(rbind, boot_samples) %>% filter(TARGET == "bowtie", BIN == 1, SUBJECT == "rcw")
boot_samples <- replicate(10, boot_fcn(), simplify = F)
boot_samples
do.call(rbind, boot_samples)
head(do.call)
do.call(rbind, boot_samples) %>% head
do.call(rbind, boot_samples)
plot_vis_dprime <- function(template.response) {
library(dplyr)
library(ggplot2)
dprime.all <- template.response %>% group_by(eccentricity, BIN, TPRESENT, TARGET, function_name, statType, statValue) %>%
summarize(var = var(TRESP), mu = mean(TRESP)) %>%
arrange(eccentricity, BIN, TARGET, function_name, TPRESENT) %>%
group_by(eccentricity, BIN, TARGET, function_name, statType, statValue) %>%
summarize(sd_avg = sqrt((var[1] + var[2])/2), delta = abs(mu[1] - mu[2]), dprime = delta/sd_avg, pc = pnorm(dprime/2), logdprime = log10(dprime))
mk.fig <- function(x) {
fig <- ggplot(data = dprime.all %>% filter(eccentricity == x), aes(x = statValue, y = logdprime, colour = function_name)) +
geom_point() +
geom_line() +
facet_wrap(statType~TARGET, nrow = 3, scales = "free_x") +
ylim(-3, 4) +
theme(aspect.ratio = 1)
ggsave(filename = paste0("~/Dropbox/Calen/Dropbox/", x,'.pdf'), plot = fig, height = 40, width = 40, units = "cm")
}
lapply(unique(template.response$eccentricity), FUN = function(x) mk.fig(x))
}
