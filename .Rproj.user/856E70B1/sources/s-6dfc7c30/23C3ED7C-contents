library(dplyr)
library(DEoptim)
source('~/Dropbox/Calen/Work/occluding/occlusion_detect/_model/model_psychometrics.R')
source('~/Dropbox/Calen/Work/occluding/occlusion_detect/_model/import_model.R')

load(
  "~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/model.psychometric.rdata"
)
load(
  "~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/human.psychometrics.rdata"
)
load(
  "~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/model.error.rdata"
)
load(
  "~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/model.mahal.rdata"
)


human.psychometrics.plot <- human.psychometrics
human.psychometrics$observer <- "human"

model.all <-
  model.error %>% mutate(pc = pnorm(dprime / 2)) %>% select(BIN, TARGET, observer, SUBJECT, eccentricity, dprime) %>% filter(SUBJECT %in% c("optimal", "nocov"))

model.all$observer <- model.all$SUBJECT
model.all$SUBJECT <- NULL


model.mahal <-
  model.mahal %>% select(BIN, TARGET, observer, eccentricity, dprime)

model.all <- rbind(model.all, model.mahal)

models.unique <- unique(model.all$observer)

model.subset <-
  model.all %>% select(BIN, TARGET, eccentricity, dprime, observer)

model.subset <- model.subset %>% filter(!BIN %in% c(1, 2))

optim.scale <- lapply(
  models.unique,
  FUN = function(model_name) {
    model <- model.subset %>% filter(observer == model_name)
    
    f.optim <- function(x) {
      print(x)
      model.psychometric.optim <- get_model_psychometric(model, x)
      
      dprime.threshold         <-
        get_dprime_at_eccentricity(model.psychometric.optim, human.psychometrics)
      
      error <- sqrt(sum(dprime.threshold$dprime_at_threshold - 1) ^ 2)
      
      if (any(
        is.nan(dprime.threshold$dprime_at_threshold) |
        is.na(dprime.threshold$dprime_at_threshold)
      )) {
        error <- NA
      }
      
      if (any(dprime.threshold$d0 < 1)) {
        error <- NA
      }
      
      return(error)
    }
    
    test.vals <- seq(.08, .13, .01)
    optim.scale <- lapply(
      test.vals,
      FUN = function(x)
        f.optim(x)
    )
    
    min.val.idx <- which.min(unlist(optim.scale))
    
    min.val <- test.vals[min.val.idx][1]
    
    data.frame(observer = model_name, min.val)
  }
)

optim.scale.frame <- do.call(rbind, optim.scale)

# create scaled psychometric functions
model.psychometrics.list <-
  mclapply(
    models.unique,
    FUN = function(x) {
      model                     <- model.all %>% filter(observer == x)
      scale.val                 <-
        optim.scale.frame %>% filter(observer == x) %>% .[["min.val"]]
      model.psychometric.scale  <-
        get_model_psychometric(model, scale.val)
      model.psychometric.scale$scale <- scale.val
      
      return(model.psychometric.scale)
    },
    mc.cores = 10
  )


model.psychometrics.scaled <-
  do.call(rbind, model.psychometrics.list)

model.thresholds  <- get_threshold(model.psychometrics.scaled)
human.thresholds  <- get_threshold(human.psychometrics.plot)


model.thresholds$se <- 0
human.thresholds$se <- human.thresholds$sd

#model.thresholds$SUBJECT <- model.thresholds$sub_type
human.thresholds$SUBJECT <- NULL

source("~/Dropbox/Calen/Work/occluding/occlusion_detect/_model/plot_theme.R")
colour.vals <-
  c("#5D001E",
    "#E3AFBC",
    "#EE4C7C",
    "#31708E",
    "#5085A5",
    "#8FC1E3")


plot.vals <-
  plot_publication_thresholds(
    human.thresholds = human.thresholds,
    model.thresholds = model.thresholds,
    statIn = "Lvals"
  )

fig.1 <-
  plot.vals + scale_linetype_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Optimal", "No Covariance", "Mahalanobis"),
    values = c(1, 1, 1, 2, 2, 2)
  ) +
  scale_colour_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Optimal", "No Covariance", "Mahalanobis"),
    values = colour.vals
  )
plot(fig.1)

ggsave(file = "~/Dropbox/Calen/Work/occluding/paper/figures/thresholds/threshold_luminance.pdf",
       fig.1,
       scale = 4,
       useDingbats = FALSE)

plot.vals <-
  plot_publication_thresholds(
    human.thresholds = human.thresholds,
    model.thresholds = model.thresholds,
    statIn = "Cvals"
  )

fig.2 <-
  plot.vals + scale_linetype_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Mahalanobis", "No Covariance", "Optimal"),
    values = c(1, 1, 1, 2, 2, 2)
  ) +
  scale_colour_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Mahalanobis", "No Covariance", "Optimal"),
    values = colour.vals
  )
plot(fig.2)
ggsave(file = "~/Dropbox/Calen/Work/occluding/paper/figures/thresholds/threshold_contrast.pdf",
       fig.2,
       scale = 4,
       useDingbats = FALSE)

plot.vals <-
  plot_publication_thresholds(
    human.thresholds = human.thresholds,
    model.thresholds = model.thresholds,
    statIn = "Svals"
  )

fig.3 <-
  plot.vals + scale_linetype_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Mahalanobis", "No Covariance", "Optimal"),
    values = c(1, 1, 1, 2, 2, 2)
  ) +
  scale_colour_manual(
    "",
    labels = c("rcw", "sps", "yhb", "Mahalanobis", "No Covariance", "Optimal"),
    values = colour.vals
  )
plot(fig.3)

ggsave(file = "~/Dropbox/Calen/Work/occluding/paper/figures/thresholds/threshold_similarity.pdf",
       fig.3,
       scale = 4,
       useDingbats = FALSE)

save(file = "~/Dropbox/Calen/Work/occluding/occlusion_detect/_data/_model_response/model.psychometrics.scaled.rdata", model.psychometrics.scaled)
