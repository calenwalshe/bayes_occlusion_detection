{
    "collab_server" : "",
    "contents" : "#' Import human data from raw text.\nget_human_responses <-\n  function(path = '~/Dropbox/Calen/Work/occluding/detection_model/_data/exported/human_data.txt') {\n    library(dplyr)\n    library(tidyr)\n    \n    bin_values <- get_experiment_bin_values()\n    \n    human_data <- read.table(path, sep = \"\\t\", header = T)\n    \n    human_data <- human_data %>% filter(!SUBJECT %in% c(\"jsa\", \"yhb\"), TRIAL != 1) %>% \n      rename(BIN = BINS)\n    \n    #human_data <- human_data %>% group_by(SUBJECT, BIN, TARGET) %>%\n    #  mutate(n_ecc = length(unique((ECCENTRICITY)))) %>% filter(!(SESSION ==\n    #                                                                2 & n_ecc > 5))\n    \n    human_data$CORRECT <- ifelse(human_data$HIT == 1 | human_data$CORRECTREJECTION == 1, 1, 0)\n    \n    human_data$BIN <- factor(human_data$BIN)\n    \n    human_data <- merge(human_data, bin_values) %>% \n      arrange(SUBJECT, TARGET, BIN, statType, SESSION, ECCENTRICITY) %>%\n      as_tibble()\n    \n    human_data %>% rename(SUBJECT = observer)\n    return(human_data)\n  }\n\n#' Produce a data frame from the raw data that contains summary statistics.\nget_human_detect <- function(human_data) {\n  if (missing(human_data)) {\n    error(\"Missing human data\")\n  }\n  \n  source('~/Dropbox/Calen/Work/occluding/detection_model_analysis/_model/import_model.R')\n  experiment_bin_values <- get_experiment_bin_values()\n  \n  human_detect <- human_data %>%\n    group_by(SUBJECT, ECCENTRICITY, BIN, TARGET) %>%\n    dplyr::summarize(\n      hit = sum(HIT == 1) / (sum(HIT == 1) + sum(MISS == 1)),\n      miss = sum(MISS == 1) / (sum(MISS == 1) + sum(HIT == 1)),\n      falsealarm = sum(FALSEALARM == 1) / (sum(FALSEALARM == 1) + sum(CORRECTREJECTION == 1)),\n      correctrejection = sum(CORRECTREJECTION == 1) / (sum(CORRECTREJECTION == 1) + sum(FALSEALARM == 1)),\n      percent_correct = mean(CORRECT)\n    ) %>% mutate(\n      hit_adj = ifelse(hit == 0, 1 / 1200, ifelse(hit == 1, 1199 / 1200, hit)),\n      falsealarm_adj = ifelse(\n        falsealarm == 0,\n        1 / 1200,\n        ifelse(falsealarm == 1, 1199 / 1200, falsealarm)\n      ),\n      percent_correct_adj = ifelse(percent_correct == 1, 2399 / 2400, percent_correct),\n      percent_correct_adj = ifelse(percent_correct == 0, 1 / 2400, percent_correct)\n    ) %>%\n    mutate(dprime = qnorm(hit_adj) - qnorm(falsealarm_adj)) %>%\n    mutate(bias = dprime / 2 - qnorm(hit_adj)) %>%\n    merge(., experiment_bin_values, by = c(\"BIN\", \"TARGET\")) %>%\n    rename(eccentricity = ECCENTRICITY) %>%\n    arrange(SUBJECT, BIN, TARGET, eccentricity, percent_correct) %>%\n    data.frame()\n  \n  human_detect        <- human_detect %>%\n    arrange(SUBJECT, statType, TARGET, BIN, eccentricity)\n  \n  return(human_detect)\n}\n\n# Compute summary statistics for the model from the raw responses\nget_model_detect <- function(model_data) {\n  experiment_bin_values <- get_experiment_bin_values()\n  \n  model_detect <- model_data %>%\n    group_by(SUBJECT, ECCENTRICITY, BIN, TARGET) %>%\n    dplyr::summarize(\n      hit = sum(HIT == 1) / (sum(HIT == 1) + sum(MISS == 1)),\n      miss = sum(MISS == 1) / (sum(MISS == 1) + sum(HIT == 1)),\n      falsealarm = sum(FALSEALARM == 1) / (sum(FALSEALARM == 1) + sum(CORRECTREJECTION == 1)),\n      correctrejection = sum(CORRECTREJECTION == 1) / (sum(CORRECTREJECTION == 1) + sum(FALSEALARM == 1)),\n      percent_correct = mean(CORRECT)\n    ) %>% mutate(\n      hit_adj = ifelse(hit == 0, 1 / 1200, ifelse(hit == 1, 1199 / 1200, hit)),\n      falsealarm_adj = ifelse(\n        falsealarm == 0,\n        1 / 1200,\n        ifelse(falsealarm == 1, 1199 / 1200, falsealarm)\n      ),\n      percent_correct_adj = ifelse(percent_correct == 1, 2399 / 2400, percent_correct),\n      percent_correct_adj = ifelse(percent_correct == 0, 1 / 2400, percent_correct)\n    ) %>%\n    mutate(dprime = (qnorm(hit_adj) - qnorm(falsealarm_adj))) %>%\n    mutate(bias = dprime / 2 - qnorm(hit_adj)) %>%\n    merge(., experiment_bin_values, by = c(\"BIN\", \"TARGET\")) %>%\n    rename(eccentricity = ECCENTRICITY) %>%\n    arrange(SUBJECT, BIN, TARGET, eccentricity, percent_correct) %>%\n    data.frame()\n  \n  model_detect$TARGET <-\n    factor(\n      model_detect$TARGET,\n      levels = c(\"vertical\", \"horizontal\", \"bowtie\", \"spot\"),\n      ordered = T\n    )\n  \n  model_detect        <- model_detect %>%\n    arrange(SUBJECT, statType, TARGET, BIN, eccentricity)\n  \n  return(model_detect)\n}\n\n#' Add thresholds to a dataframe that contains psychometric parameters\nget_threshold <- function(psychometric_parameters) {\n  thresholds <- psychometric_parameters %>%\n    rowwise() %>%\n    mutate(threshold = ((d0 *\n                           e0 ^ b) / 1 - e0 ^ b) ^ (1 / b),\n           threshold_pc = (e0^b * ((2 * qnorm(.7))/d0)^-1 - e0^b)^(1/b))\n  \n  return(thresholds)\n}\n\n#' Plot thresholds measured from the human and ideal performance.\nplot_publication_thresholds <-\n  function(human.thresholds,\n           model.thresholds,\n           statIn = \"Lvals\") {\n    \n    library(ggthemes)\n    human.thresholds <- human.thresholds %>%\n      mutate(TARGET = factor(TARGET, levels = c(\"vertical\", \"horizontal\", \"bowtie\", \"spot\")))\n    \n    model.thresholds <- model.thresholds %>%\n      mutate(TARGET = factor(TARGET, levels = c(\"vertical\", \"horizontal\", \"bowtie\", \"spot\")))\n    \n    human.threshold.1 <- human.thresholds %>%\n      group_by(TARGET, BIN, SUBJECT) %>%\n      dplyr::summarize(se = se, threshold = mean(threshold)) %>%\n      select(TARGET, BIN, threshold, SUBJECT, se) %>%\n      as_tibble()\n    \n    model.threshold.1 <- model.thresholds %>%\n      select(TARGET, BIN, threshold, SUBJECT) %>%\n      as_tibble()\n    \n    threshold_values <- full_join(model.threshold.1, human.threshold.1)\n    \n    threshold_values <- threshold_values %>% mutate(linetype = ifelse(SUBJECT %in% c(\"dprime.opt\", \"dprime.sub\") ,1,2))\n    \n    bin_values <- get_experiment_bin_values()\n    \n    d.1 <- merge(threshold_values, bin_values) %>%\n      group_by(TARGET, BIN, statValue, statType, SUBJECT) %>%\n      dplyr::summarize(se = se, threshold = mean(threshold), linetype = linetype) %>%\n      filter(statType == statIn) %>%\n      arrange(TARGET, BIN, SUBJECT)\n    \n    d.1$linetype <- as.factor(d.1$linetype)\n    t.1.plot <-\n      ggplot(data = d.1, aes(x = statValue, y = threshold,\n                             colour = SUBJECT, group = SUBJECT)) +\n      geom_point(size = 2) +\n      geom_line(size = 1.25) +\n      facet_wrap(~ TARGET) +\n      theme_set(theme_bw(base_size = 35))  +# pre-set the bw theme.\n      theme(aspect.ratio = 1, legend.key.height=unit(3,\"line\")) +\n      scale_color_brewer(name = \"Subject\", palette = \"Dark2\") +\n      ylab(\"Eccentricity Threshold (ยบ)\")\n    \n    if (statIn == \"Lvals\") {\n      t.1.plot <- t.1.plot + expand_limits(x = c(0,1), y = c(0, 23)) + xlab(\"Background Luminance (%)\") +\n        geom_errorbar(aes(ymin=threshold-se, ymax=threshold+se), width = 4)\n    } else if (statIn == \"Cvals\") {\n      t.1.plot <- t.1.plot + expand_limits(x = c(0, 1), y = c(0, 15)) + xlab(\"Background Contrast (RMS)\") +\n        geom_errorbar(aes(ymin=threshold-se, ymax=threshold+se), width = .1)\n    } else if (statIn == \"Svals\") {\n      t.1.plot <- t.1.plot + expand_limits(x = c(.4,1), y = c(0,18)) + xlab(\"Background Similarity\") +\n        geom_errorbar(aes(ymin=threshold-se, ymax=threshold+se), width = .025)\n    }\n    plot(t.1.plot)\n    ggsave(t.1.plot, file = paste0('~/Dropbox/Calen/Work/occluding/detection_model_analysis/presentations/', statIn, \"_thresholds.pdf\"), scale= 1.35)\n  }\n",
    "created" : 1525452062501.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2974715085",
    "id" : "9133AB74",
    "lastKnownWriteTime" : 1541084900,
    "last_content_update" : 1541084900,
    "path" : "~/Dropbox/Calen/Work/occluding/detection_model_analysis/_human/human_psychometrics.R",
    "project_path" : null,
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}