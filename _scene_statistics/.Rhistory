group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1)
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
ggsave(file = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics)
fit.template.stats(scene_statistics)
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1)
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
ggsave(file = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1)
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
fig.fitted
ggsave(file = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/stats_parameter_fig.pdf'), width = 40, height = 40)
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/stats_parameter_fig.pdf'), width = 40, height = 40)
fitted.params.long
fitted.params
fitted.params
scene_statistics
scene_statistics$eccentricity
scene_statistics$eccentricity %>% unique
scene_statistics <- import_stats(file_path = '/Users/rcw/Dropbox/Calen/Work/occluding/detection_model_analysis/_scene_statistics/exported_scene_stats/')
scene_statistics$eccentricity %>% unique
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1)
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics)
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1)
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1)
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/template_stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics)
scene_statistics <- import_stats(file_path = '/Users/rcw/Dropbox/Calen/Work/occluding/detection_model_analysis/_scene_statistics/exported_scene_stats/')
fit.template.stats(scene_statistics)
fit.template.stats(scene_statistics, c(1,3,5))
scene_statistics
scene_statistics %>% group_by(eccentricity) %>% summarize(mean(response))
scene_statistics %>% group_by(eccentricity) %>% summarize(mean(response, na.rm = T))
scene_statistics <- import_stats(file_path = '/Users/rcw/Dropbox/Calen/Work/occluding/detection_model_analysis/_scene_statistics/exported_scene_stats/')
fit.template.stats(scene_statistics, c(1,3,5))
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1) +
list(theme(legend.position = "bottom",
legend.title = element_text(size=20),
plot.title = element_text(size = 30),
axis.title = element_text(size=20),
axis.text = element_text(size=15),
legend.text = element_text(size=15)),
scale_y_continuous(limits=c(0,100)),
scale_colour_manual(values=hcl(c(15,195),100,65)))
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1) +
list(theme(legend.position = "bottom",
legend.title = element_text(size=20),
plot.title = element_text(size = 30),
axis.title = element_text(size=20),
axis.text = element_text(size=15),
legend.text = element_text(size=15)),
scale_y_continuous(limits=c(0,100)),
scale_colour_manual(values=hcl(c(15,195),100,65)))
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/template_stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics, c(1,3,5))
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1) +
list(theme(legend.position = "bottom",
legend.title = element_text(size=20),
plot.title = element_text(size = 30),
axis.title = element_text(size=20),
axis.text = element_text(size=15),
legend.text = element_text(size=15)))
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1) +
list(theme(legend.position = "bottom",
legend.title = element_text(size=20),
plot.title = element_text(size = 30),
axis.title = element_text(size=20),
axis.text = element_text(size=15),
legend.text = element_text(size=15)))
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/template_stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics, c(1,3,5))
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1) +
list(theme(legend.title = element_text(size=40),
plot.title = element_text(size = 40),
axis.title = element_text(size=40),
axis.text = element_text(size=40),
legend.text = element_text(size=40)))
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1) +
list(theme(legend.title = element_text(size=40),
plot.title = element_text(size = 40),
axis.title = element_text(size=40),
axis.text = element_text(size=40),
legend.text = element_text(size=40)))
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/template_stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics, c(1,3,5))
fit.template.stats <- function(scene_statistics, eccLvl = c(1,3)) {
library(bbmle)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(knitr)
library(kableExtra)
template.stats <- scene_statistics %>%
filter(eccentricity %in% eccLvl, response_type == "tMatch", statistic == "sigma", !is.nan(response)) %>%
group_by(TARGET, eccentricity, ecc_deg) %>%
nest()
m.1 <- template.stats %>%
mutate(model = map(data, function(data) {
model <- mle2(response ~ dnorm(mean = k0 * (I(Lvals) + L_p)*(I(Cvals) + C_p)*(I(Svals) + S_p)^S_exp, sd = response),
start = list(k0 = 0, L_p = 0,C_p = 0,S_p = 0, S_exp = 0),
data = data)
})) %>%
mutate(prediction = map(model, predict))
sqe.dat <- m.1 %>%
unnest(data, prediction) %>%
mutate(sqe = (abs(response - prediction))/response) %>%
filter(sqe < 2 * sd(sqe))
model.response <- m.1 %>%
unnest(data, prediction) %>%
gather(response, value, prediction, response)
# Plot Template Response Statistics
model.response %>%
group_by(ecc_deg) %>%
nest() %>%
mutate(fig.vis = map2(ecc_deg, data, function(ecc_arg, model_arg) {
fig.1 <- ggplot(data = model_arg, aes(x = Svals , y = value, colour = as.factor(Cvals), linetype = as.factor(response), shape = as.factor(response))) +
geom_point() +
geom_line() +
facet_wrap(Lvals ~ TARGET, ncol = 8, scale = "free") +
theme_bw(base_size = 30) +
theme(aspect.ratio = 1) +
list(theme(legend.title = element_text(size=40),
plot.title = element_text(size = 40),
axis.title = element_text(size=40),
axis.text = element_text(size=25),
legend.text = element_text(size=40)))
ggsave(plot = fig.1, filename = paste0('~/Dropbox/Calen/Dropbox/template_sigma_', ecc_arg,'.pdf'), width = 40, height = 40)
}))
fitted.params <- cbind(m.1[,1:3],data.frame(do.call(rbind, map(m.1$model, coef))))
fitted.params %>%
kable(format = 'latex') %>%
kable_as_image('~/Dropbox/Calen/Dropbox/template_sigma_params', file_format = 'pdf')
fitted.params.long <- fitted.params %>%
gather("param_label", "v", 4:8)
fig.fitted <- ggplot(fitted.params.long, aes(x = ecc_deg, y = v, colour = TARGET)) +
geom_point() +
geom_line() +
facet_wrap(~param_label, scales = "free_y", nrow = 1) +
theme(aspect.ratio = 1) +
list(theme(legend.title = element_text(size=40),
plot.title = element_text(size = 40),
axis.title = element_text(size=40),
axis.text = element_text(size=25),
legend.text = element_text(size=40)))
ggsave(plot = fig.fitted, filename = paste0('~/Dropbox/Calen/Dropbox/template_stats_parameter_fig.pdf'), width = 40, height = 40)
}
fit.template.stats(scene_statistics, c(1,3,5))
